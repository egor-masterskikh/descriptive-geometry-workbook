\startcomponent .
\startuseMPgraphic{вторая основная позиционная задача}
    fig_width := \framedwidth;
    fig_height := \framedheight;

    x_max := fig_width;
    y1_max := .5 * fig_height;
    z_max := fig_height - y1_max;

    draw_axes(x_max, y1_max, z_max, 0);

    pair S[];
    path a[], b[];

    S.x := .8 * x_max;
    S.y := .28 * y1_max;
    S.z := .13 * z_max;

    S1 := (-S.x, -S.y);
    S2 := (-S.x, S.z);

    a1_inclination := 60;
    a2_inclination := -60;

    a1 := get_line(
        0.95 * (y1_max - S.y) / sind a1_inclination, a1_inclination,
        S1, 1
    );

    a2 := get_line(
        0.85 * (z_max - S.z) / sind a2_inclination, a2_inclination,
        S2, 0
    );

    b1_inclination := -25;
    b2_inclination := 40;

    b1 := get_line(
        0.54 * (y1_max - S.y) / sind b1_inclination, b1_inclination,
        S1, 1
    );

    b2 := get_line(
        0.8 * (z_max - S.z) / sind b2_inclination, b2_inclination,
        S2, 0
    );

    pair T[];
    path c[], d[];

    T.x := .36 * x_max;
    T.y := .36 * y1_max;
    T.z := .5 * z_max;

    T1 := (-T.x, -T.y);
    T2 := (-T.x, T.z);

    c1_inclination := 50;
    c2_inclination := -50;

    c1 := get_line(
        0.6 * y1_max / sind c1_inclination, c1_inclination,
        T1, 0.6
    );

    c2 := get_line(
        0.6 * z_max / sind c2_inclination, c2_inclination,
        T2, 0.4
    );

    d1 := c1 shifted (0.5 * y1_max * dir -10);
    d2 := c2 shifted (0.16 * x_max * right);

    path Delta[], Delta'[];

    Delta2 := get_line(
        0.95 * x_max, 0,
        (-0.5 * x_max, 0.72 * z_max), 0.5
    );

    Delta'2 := Delta2 shifted (0.35 * z_max * down) shifted (0.02 * x_max * right);

    pair P[]_[];

    P1_2 := a2 intersectionpoint Delta2;
    P1_1 := a1 intersectionpoint ((xpart P1_2, -infinity)--(xpart P1_2, infinity));

    P2_2 := b2 intersectionpoint Delta2;
    P2_1 := b1 intersectionpoint ((xpart P2_2, -infinity)--(xpart P2_2, infinity));

    P3_2 := c2 intersectionpoint Delta2;
    P3_1 := c1 intersectionpoint ((xpart P3_2, -infinity)--(xpart P3_2, infinity));

    P4_2 := d2 intersectionpoint Delta2;
    P4_1 := d1 intersectionpoint ((xpart P4_2, -infinity)--(xpart P4_2, infinity));

    P5_2 := a2 intersectionpoint Delta'2;
    P5_1 := a1 intersectionpoint ((xpart P5_2, -infinity)--(xpart P5_2, infinity));

    P6_2 := d2 intersectionpoint Delta'2;
    P6_1 := d1 intersectionpoint ((xpart P6_2, -infinity)--(xpart P6_2, infinity));

    path m[], m'[], n[], n'[];
    pair A[], B[];

    A1 = whatever[P1_1, P2_1] = whatever[P4_1, P3_1];
    A2 := Delta2 intersectionpoint ((xpart A1, -infinity)--(xpart A1, infinity));

    m1 := P1_1--A1;
    n1 := P4_1--A1;

    B1 = whatever[P5_1, (P2_1 - P1_1) shifted P5_1] = whatever[P6_1, (P3_1 - P4_1) shifted P6_1];
    B2 := Delta'2 intersectionpoint ((xpart B1, -infinity)--(xpart B1, infinity));

    m'1 := P5_1--B1;
    n'1 := P6_1--B1;

    path l[];

    l1 := 1.2[B1, A1]--1.2[A1, B1];
    l2 := 1.2[B2, A2]--1.2[A2, B2];


    draw S1--S2;
    draw_path_with_arrow(P1_2--P1_1, 0.6);
    draw_path_with_arrow(P2_2--P2_1, 0.68);
    draw_path_with_arrow(P3_2--P3_1, 0.85);
    draw_path_with_arrow(P4_2--P4_1, 0.85);
    draw_path_with_arrow(P5_2--P5_1, 0.68);
    draw_path_with_arrow(P6_2--P6_1, 0.82);

    pickup base_pen;

    draw a1;
    draw a2;
    draw b1;
    draw b2;

    draw c1;
    draw c2;
    draw d1;
    draw d2;

    draw Delta2;
    draw Delta'2;

    pickup thin_pen;

    draw m1;
    draw n1;
    draw m'1;
    draw n'1;

    draw_path_with_arrow(A1--A2, 0.6);
    draw_path_with_arrow(B1--B2, 0.67);

    draw l1 withpen base_pen;
    draw l2 withpen base_pen;

    label.ulft("$\Delta_2 \equiv m_2 \equiv n_2$", point 1 of Delta2);
    label.ulft("$\bar{\Delta}_2 \equiv \bar{m}_2 \equiv \bar{n}_2$", point 1 of Delta'2);

    draw_point_circ_with_label(S1, "$S_1$", urt);
    draw_point_circ_with_label(S2, "$S_2$", lrt);

    draw_point_circ_with_label(P1_1, "$1_1$", lrt);
    draw_point_circ_with_label(P1_2, "$1_2$", urt);

    draw_point_circ_with_label(P2_1, "$2_1$", bot);
    draw_point_circ_with_label(P2_2, "$2_2$", ulft);

    draw_point_circ_with_label(P3_1, "$3_1$", bot);
    draw_point_circ_with_label(P3_2, "$3_2$", urt);

    draw_point_circ_with_label(P4_1, "$4_1$", lrt);
    draw_point_circ_with_label(P4_2, "$4_2$", urt);

    draw_point_circ_with_label(P5_1, "$5_1$", lrt);
    draw_point_circ_with_label(P5_2, "$5_2$", urt);

    draw_point_circ_with_label(P6_1, "$6_1$", lrt);
    draw_point_circ_with_label(P6_2, "$6_2$", llft);

    draw_point_circ_with_label(A1, "$A_1$", ulft);
    draw_point_circ_with_label(A2, "$A_2$", llft);

    draw_point_circ_with_label(B1, "$B_1$", ulft);
    draw_point_circ_with_label(B2, "$B_2$", llft);

    label.lft("$a_1$", point 0 of a1);
    label.top("$a_2$", point 1 of a2);

    label.bot("$b_1$", point 0 of b1);
    label.top("$b_2$", point 1 of b2);

    label.lft("$c_1$", point 0 of c1);
    label.top("$c_2$", point 1 of c2);

    label.lft("$d_1$", point 0 of d1);
    label.top("$d_2$", point 1 of d2);
\stopuseMPgraphic
\stopcomponent